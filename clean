#!/bin/bash

export working_dir=$(pwd)
cd $(dirname $0)
export vdev_dir="$working_dir/.vdev"


source detail/utils
source detail/dictionary


if [ ! -d "$vdev_dir" ]
then
	printf_vdev_error 'current path doesn'"'"'t have any virtual-dev configuration'
	exit 1
fi

source "$vdev_dir/vm"
source "$vdev_dir/conf"
source detail/dictionary


help_message=\
'Usages:
	Path/To/virtual-dev/clean <Path/To/Solution.sln> <ProjectName> <Debug/Release/Other>
'


#
# Parameters

if [ $# \< 2 ] || [ $# \> 3 ]
then
	printf_vdev_error 'wrong number of arguments'
	printf_message '%s' "$help_message"
	exit 1
fi

solution_path=$1
target=$2
configuration=$3


#
# Main

if ! detail/"$vm"/vm_exists "$guest_name"
then
	printf_vdev_error '"%s" does not exist' "$guest_name"
	exit 1
fi

if ! detail/"$vm"/is_running "$guest_name"
then
	printf_vdev_error '"%s" is not running' "$guest_name"
	exit 1
fi


solution_absolute_path="$working_dir/$solution_path"
if [ ! -r "$solution_absolute_path" ]
then
	printf_vdev_error '"%s" does not exists or readable' "$solution_absolute_path"
	exit 1
fi

solution_cache_dir=$(make_solution_cache_path "$solution_path" "$vdev_dir/cache")
solution_cache_path="$solution_cache_dir/solution.cache"
detail/cache_solution_info "$solution_absolute_path" "$solution_cache_path"

vs_version=$(dictionary_find "$solution_cache_path" 'version')

solution_dir=$(dirname "$solution_path")
project_path=$(dictionary_find "$solution_cache_path" "$target")
guest_project_path="$guest_root_dir/$solution_dir/$project_path"
detail/"$vm"/execute "$guest_clean_bat" "$vs_version" "$guest_project_path" "$configuration" | detail/error_format_mvs_to_gcc
retval=$?
printf '\n' # if put newline in Windows then it can be swallowed

if [ $retval == 1 ]
then
	printf_vdev_error 'failed to execute clean command'
	exit 1
fi

exit $retval

