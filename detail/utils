source detail/constants


has_terminal()
{
	tty -s
}


printf_message()
{
	printf "$@"
	printf '\n'
}


printf_stderr()
{
	printf "$@" >&2
}


printf_vdev_error()
{
	local script_name="vdev-$(basename $0)"

	if has_terminal
	then
		printf_stderr "$RED_TEXT"'%s error:'"$NEUTRAL_TEXT"' ' "$script_name"
	else
		printf_stderr '%s error: ' "$script_name"
	fi

	printf_stderr "$@"
	printf_stderr '\n\n'
}


conf_add()
{
	local file=$1
	local key=$2
	local value=$3

	printf '%s="%s"\n' "$key" "$value" >> "$file"
}


expand_dir_path()
{
	local path=$1

	local absolute_dir_path=$(cd $path; pwd)
	printf '%s\n' "$absolute_dir_path"
}


expand_path()
{
	local path=$1

	local dir=$(dirname "$path")
	local base_name=$(basename "$path")
	local absolute_dir_path=$(expand_dir_path "$dir")
	printf '%s\n' "$absolute_dir_path/$base_name"
}


dos2unix_path()
{
	local dos_path=$1

	sed 's/\\/\//g' <<< $dos_path
}


trim_eoln()
{
	sed -e $'s/\r$//g'
}


escape_backslashes()
{
	local dos_path=$1

	sed 's/\\/\\\\/g' <<< $dos_path
}


unquote()
{
	local quoted=$1

	local unquoted=${quoted:1:${#quoted}-2}
	printf '%s\n' "$unquoted"
}


make_solution_cache_name()
{
	local path=$1

	sed 's/\//\./g' <<< "$path"
}


make_solution_cache_path()
{
	local solution_path=$1
	local out_dir=$2

	local solution_cache_dir=$(make_solution_cache_name "$solution_path")
	printf '%s\n' "$out_dir/$solution_cache_dir"
}


check_dir()
{
	local path=$1

	if [ -d "$path" ]
	then
		return
	fi

	mkdir -p "$path"
}

