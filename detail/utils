try()
{
	rm -f 'error_buffer'

	local output=$("$@" 2>&1)
	if [ $? -ne 0 ]
	then
		printf "$output" > 'error_buffer'
		return 1
	fi

	if [ ! -z "$output" ]
	then
		printf '%s\n' "$output"
	fi
}


catch()
{
	if [ $? == 0 ]
	then
		return 0
	fi

	"$@"

	exit 1
}


printf_message()
{
	printf "$@"
	printf '\n'
}


print_vdev_error()
{
	local message=$(printf "$@")

	printf '** virtual-dev error: %s\n' "$message" >&2

	if [ -f 'error_buffer' ]
	then
		local error_buffer=$(cat 'error_buffer')
		printf 'details:\n%s\n' "$error_buffer" >&2
		rm -f 'error_buffer'
	fi

	printf '\n'
}


conf_add()
{
	local file=$1
	local key=$2
	local value=$3

	printf '%s="%s"\n' "$key" "$value" >> "$file"
}


dos2unix_path()
{
	local dos_path=$1

	sed 's/\\/\//g' <<< $dos_path
}


escape_backslashes()
{
	local dos_path=$1

	sed 's/\\/\\\\/g' <<< $dos_path
}


unquote()
{
	local quoted=$1

	local unquoted=${quoted:1:${#quoted}-2}
	printf '%s\n' "$unquoted"
}


make_solution_cache_name()
{
	local path=$1

	sed 's/\//\./g' <<< "$path"
}


make_solution_cache_path()
{
	local solution_path=$1
	local out_dir=$2

	local solution_cache_dir=$(make_solution_cache_name "$solution_path")
	printf '%s\n' "$out_dir/$solution_cache_dir"
}


assert_file_readable()
{
	local path=$1

	if [ ! -r "$path" ]
	then
		print_vdev_error 'cannot read file "%s"' "$path"
		exit 1
	fi
}


print_custom_vdev_error()
{
	local default_message=$1
	local user_message=$2

	if [ -n "$user_message" ]
	then
		print_vdev_error "$user_message"
	else
		print_vdev_error "$default_message"
	fi
}


assert_dir_exists()
{
	local path=$1
	local error_message=$2

	if [ ! -d "$path" ]
	then
		print_custom_vdev_error 'directory '"$path"' does not exist' "$error_message"
		exit 1
	fi
}


check_dir()
{
	local path=$1

	if [ -d "$path" ]
	then
		return
	fi

	mkdir -p "$path"
}

