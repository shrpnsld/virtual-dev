#!/bin/bash

export working_dir=$(pwd)
cd $(dirname $0)
export vdev_dir="$working_dir/.vdev"


source detail/constants
source detail/utils
source detail/dictionary


# 'vm' configuration

# for future extensibility
VirtualBox='VBoxManage'
vm='VirtualBox'
vm_manage=$(which "${!vm}")


help_message=\
'Usage:
	Path/To/virtual-dev/init <guest_name> <user> <password>
'


#
# Parameters

if [ $# -ne 3 ]
then
	printf_vdev_error 'wrong number of arguments'
	printf_message '%s' "$help_message"
	exit 1
fi

guest_name=$1
user=$2
password=$3


#
# Main

# Configuration

rm -rf "$vdev_dir"
mkdir "$vdev_dir"

vdev_vm_file="$vdev_dir/$VM_FILE"

dictionary_insert "$vdev_vm_file" 'vm' "$vm"
dictionary_insert "$vdev_vm_file" 'vm_manage' "$vm_manage"
dictionary_insert "$vdev_vm_file" 'guest_name' "$guest_name"
dictionary_insert "$vdev_vm_file" 'user' "$user"
dictionary_insert "$vdev_vm_file" 'password' "$password"

dictionary_load "$vdev_vm_file" 'vm' 'guest_name'


# Checks

vm_version=$(detail/"$vm"/version)
if ! detail/check_vm_version "$vm_version" detail/"$vm"/required_versions
then
	printf_vdev_error 'current version of VirtualBox is not supported\nRequired versions are: %s' "$(cat detail/"$vm"/required_versions)"
	exit 1
fi


if ! detail/"$vm"/vm_exists "$guest_name"
then
	printf_vdev_error '"%s" does not exist' "$guest_name"
	exit 1
fi


# Shared folder

project_root="$working_dir"

project_name=$(basename "$project_root")

if detail/"$vm"/is_running "$guest_name"
then
	printf_vdev_error '"%s" is currently running, please shut it down' "$guest_name"
	exit 1
fi

detail/"$vm"/shared_folder "$project_name" "$project_root"
if [ $? != 0 ]
then
	printf_vdev_error 'failed to create shared folder on "%s"' "$vm"
	exit 1
fi

