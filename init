#!/bin/bash

export VIRTUAL_DEV_WORKING_DIR=$(pwd)
cd $(dirname $0)

source detail/constants
source detail/utils
source detail/dictionary


# 'vm' configuration

# for future extensibility
VirtualBox='VBoxManage'
vm='VirtualBox'
vm_manage=$(which "${!vm}")


HELP_MESSAGE=\
'Usage:
	vdev-init <guest-name> <user> <password>
'


#
# Parameters

if [ $# -ne 3 ]
then
	printf-vdev-error 'wrong number of arguments'
	printf-message '%s' "$HELP_MESSAGE"
	exit 1
fi

guest_name=$1
user=$2
password=$3


#
# Main

# Configuration

export VIRTUAL_DEV_WORKSPACE_DIR="$VIRTUAL_DEV_WORKING_DIR/$VIRTUAL_DEV_WORKSPACE_NAME"

rm -rf "$VIRTUAL_DEV_WORKSPACE_DIR"
mkdir "$VIRTUAL_DEV_WORKSPACE_DIR"
create-workspace-id "$VIRTUAL_DEV_WORKSPACE_DIR/$VIRTUAL_DEV_WORKSPACE_ID_FILE"

vdev_vm_file="$VIRTUAL_DEV_WORKSPACE_DIR/$VM_FILE"

dictionary-insert "$vdev_vm_file" 'vm' "$vm"
dictionary-insert "$vdev_vm_file" 'vm_manage' "$vm_manage"
dictionary-insert "$vdev_vm_file" 'guest_name' "$guest_name"
dictionary-insert "$vdev_vm_file" 'user' "$user"
dictionary-insert "$vdev_vm_file" 'password' "$password"

dictionary-load "$vdev_vm_file" 'vm' 'guest_name'

cp -Rn "detail/$GUEST_SCRIPTS_DIR" "$VIRTUAL_DEV_WORKSPACE_DIR/"


# Checks

vm_version=$(detail/"$vm"/version)
if ! detail/check-vm-version "$vm_version" detail/"$vm"/required_versions
then
	printf-vdev-error 'current version of VirtualBox is not supported\nRequired versions are: %s' "$(cat detail/"$vm"/required_versions)"
	exit 1
fi


if ! detail/"$vm"/vm-exists "$guest_name"
then
	printf-vdev-error '"%s" does not exist' "$guest_name"
	exit 1
fi


# Shared folder

project_root="$VIRTUAL_DEV_WORKING_DIR"

project_name=$(basename "$project_root")

if detail/"$vm"/is-running "$guest_name"
then
	printf-vdev-error '"%s" is currently running, please shut it down' "$guest_name"
	exit 1
fi

detail/"$vm"/shared-folder "$project_name" "$project_root"
if [ $? != 0 ]
then
	printf-vdev-error 'failed to create shared folder on "%s"' "$vm"
	exit 1
fi

