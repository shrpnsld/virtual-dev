#!/bin/bash

export working_dir=$(pwd)
cd $(dirname $0)
export vdev_dir="$working_dir/.vdev"


source detail/constants
source detail/utils
source detail/dictionary


if [ ! -d "$vdev_dir" ]
then
	printf_vdev_error 'current path doesn'"'"'t have any virtual-dev configuration'
	exit 1
fi


HELP_MESSAGE=\
'Usage:
    vdev-msbuild <Path/To/Project.vcxproj> [<MSBuild-arguments>...]  (1)
    vdev-msbuild <Path/To/Solution.sln> [<MSBuild-arguments>...]     (2)
    vdev-msbuild <MVS-version> [<MSBuild-arguments>...]              (3)

Options:
    <Path/To/Project.vcxproj>  Path to .vcxproj file; Visual Studio version will be detected by searching corresponding solution file.
    <Path/To/Solution.sln>     Specify solution file to detect Visual Studio version from it.
    <MVS-version>              Specify Visual Studio version explicitly.
    <MSBuild-arguments>        Arguments for MSBuild.

Notes:
    "Paths/To/Some.thing" should be relative.

    Forms (1) and (2) pass their first argument to MSBuild.
'


#
# Parameters

vs_version=$1


#
# Funtions

vs_version_for_parameters()
{
	local first_parameter=$1

	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "$first_parameter"
		return
	fi

	if ! [[ $first_parameter =~ .*\.sln ]]
	then
		local solution_path=$(detail/find_solution_for_project "$first_parameter")
	fi

	if [ -z "$solution_path" ]
	then
		local solution_path="$working_dir/$first_parameter"
	fi

	if [ ! -r "$solution_path" ]
	then
		return 1
	fi

	detail/vs_version "$solution_path"
	if [ $? != 0 ]
	then
		return 1
	fi
}


msbuild_arguments_from_parameters()
{
	local first_parameter=$1

	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "${@:2}"
	else
		printf '%s\n' "$@"
	fi
}


#
# Main

vdev_vm_file="$vdev_dir/$VM_FILE"
dictionary_load "$vdev_vm_file" 'vm' 'guest_name'


# Checks

if ! detail/"$vm"/vm_exists "$guest_name"
then
	printf_vdev_error '"%s" does not exist' "$guest_name"
	exit 1
fi

if ! detail/"$vm"/is_running "$guest_name"
then
	printf_vdev_error '"%s" is not running' "$guest_name"
	exit 1
fi


# Paratemers

if [ $# \< 1 ]
then
	printf_vdev_error 'too few arguments'
	printf_message '%s' "$HELP_MESSAGE"
	exit 1
fi


# Paths file

vdev_guest_paths_file="$vdev_dir/$GUEST_PATHS_FILE"

detail/check_paths_file "$vdev_guest_paths_file"
dictionary_load "$vdev_guest_paths_file" 'guest_root_dir' 'guest_msbuild_bat'


# msbuild

vs_version=$(vs_version_for_parameters "$@")
if [ $? != 0 ]
then
	printf_vdev_error 'failed to detect Visual Studio version. Specify it explicitly.'
	exit 1
fi

msbuild_arguments=($(msbuild_arguments_from_parameters "$@"))

# passing arguments through environment variable, because "cmd.exe" will remove "=" character from arguments like "/property:configuration=Release"
export virtual_dev_arguments="${msbuild_arguments[@]}"
detail/"$vm"/execute "$guest_msbuild_bat" "$guest_root_dir" "$vs_version" | detail/error_format_mvs_to_gcc
retval=${PIPESTATUS[0]}
if [ $retval == 1 ]
then
	printf_vdev_error 'failed to execute build command.'
	exit 1
fi

exit $retval

