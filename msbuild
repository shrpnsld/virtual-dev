#!/bin/bash

if [ -z "$VIRTUAL_DEV" ]
then
	export VIRTUAL_DEV=$(dirname $0)
fi

export VIRTUAL_DEV_WORKING_DIR=$PWD

source "$VIRTUAL_DEV"/detail/constants
source "$VIRTUAL_DEV"/detail/utils
source "$VIRTUAL_DEV"/detail/dictionary


export VIRTUAL_DEV_WORKSPACE_DIR="$VIRTUAL_DEV_WORKING_DIR/$VIRTUAL_DEV_WORKSPACE"

if [ ! -d "$VIRTUAL_DEV_WORKSPACE_DIR" ]
then
	printf-vdev-error 'current path doesn'"'"'t have any virtual-dev workspace'
	exit 1
fi


HELP_MESSAGE=\
'Runs MSBuild with given arguments

Usage:
    vdev-msbuild [<MSBuild-arguments>...]
    vdev-msbuild <MVS-version> [<MSBuild-arguments>...]
	vdev-msbuild -h | --help

Parameters:
    <MSBuild-arguments>  Arguments for MSBuild.
    <MVS-version>        Specify Visual Studio version (not year) explicitly.
    -h | --help          Show this message

Notes:
    If no MVS version was specified, arguments should specify path to .sln or .vcxproj file. This way virtual-dev can detect MVS version automatically.

    Solution or project paths should be relative to project root.
'


#
# Parameters

vs_version=$1


#
# Functions

validate-parameters()
{
	local parameters=("$@")

	array-search-by-pattern '.*\.sln' "${parameters[@]}" > /dev/null
	if [ $? == 0 ]
	then
		return
	fi

	array-search-by-pattern '.*\.vcxproj' "${parameters[@]}" > /dev/null
	if [ $? == 0 ]
	then
		return
	fi

	local first_parameter=${parameters[@]}
	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "$first_parameter"
		return
	fi

	return 1
}


vs-version-for-parameters()
{
	local first_parameter=$1
	local parameters=("$@")

	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "$first_parameter"
		return
	fi

	local project_path
	project_path=$(array-search-by-pattern '.*\.vcxproj' "${parameters[@]}")
	if [ $? == 0 ]
	then
		local absolute_solution_path=$("$VIRTUAL_DEV"/detail/find-solution-for-vcxproj "$project_path")
	fi

	if [ -z "$absolute_solution_path" ]
	then
		local solution_path
		solution_path=$(array-search-by-pattern '.*\.sln' "${parameters[@]}")
		if [ $? != 0 ]
		then
			return 1
		fi

		local absolute_solution_path="$VIRTUAL_DEV_WORKING_DIR/$solution_path"
	fi

	if [ ! -r "$absolute_solution_path" ]
	then
		return 1
	fi

	"$VIRTUAL_DEV"/detail/vs-version "$absolute_solution_path"
	if [ $? != 0 ]
	then
		return 1
	fi
}


msbuild-arguments-from-parameters()
{
	local first_parameter=$1

	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "${@:2}"
	else
		printf '%s\n' "$@"
	fi
}


#
# Main

vdev_vm_file="$VIRTUAL_DEV_WORKSPACE_DIR/$VIRTUAL_DEV_VM_FILE"
dictionary-load "$vdev_vm_file" 'vm' 'guest_name'


# Paratemers

if [ $# \< 1 ]
then
	printf-vdev-error 'too few arguments\nUse '"'"'-h'"'"' or '"'"'--help'"'"' to get help'
	exit 1
fi

if [ $# == 1 ] && ([ $1 == '-h' ] || [ $1 == '--help' ])
then
	printf '%s\n' "$HELP_MESSAGE"
	exit
fi

if ! validate-parameters "$@"
then
	printf-vdev-error 'bad arguments\nUse '"'"'-h'"'"' or '"'"'--help'"'"' to get help'
	printf '%s\n' "$HELP_MESSAGE"
	exit 1
fi


# Checks

if ! "$VIRTUAL_DEV"/detail/"$vm"/vm-exists "$guest_name"
then
	printf-vdev-error '"%s" does not exist' "$guest_name"
	exit 1
fi

"$VIRTUAL_DEV"/detail/"$vm"/check-vm-started
if [ $? != 0 ]
then
	printf-vdev-error 'failed to start "%s"' "$guest_name"
	exit 1
fi


# Paths file

vdev_guest_paths_file="$VIRTUAL_DEV_WORKSPACE_DIR/$VIRTUAL_DEV_GUEST_PATHS_FILE"

"$VIRTUAL_DEV"/detail/check-paths-file "$vdev_guest_paths_file"
if [ $? == 2 ]
then
	printf-vdev-warning 'shared disk on "%s" for this workspace was changed. This may cause an error during compilation. You may need to check paths in the solution' "$guest_name"
fi

dictionary-load "$vdev_guest_paths_file" 'guest_root_dir' 'guest_msbuild_bat'


# MVS version

vs_version=$(vs-version-for-parameters "$@")
if [ $? != 0 ]
then
	printf-vdev-error 'failed to detect Visual Studio version. Specify it explicitly'
	exit 1
fi


# MSbuild

trap "$VIRTUAL_DEV/detail/terminate MSBuild.exe" INT

msbuild_arguments=($(msbuild-arguments-from-parameters "$@"))

# passing arguments through environment variable, because "cmd.exe" will remove "=" character from arguments like "/property:configuration=Release"
export VIRTUAL_DEV_ARGUMENTS="${msbuild_arguments[@]}"
"$VIRTUAL_DEV"/detail/"$vm"/execute "$guest_msbuild_bat" "$guest_root_dir" "$vs_version" | "$VIRTUAL_DEV"/detail/error-format-mvs-to-gcc
retval=${PIPESTATUS[0]}
if [ $retval == 1 ]
then
	printf-vdev-error 'failed to execute build command'
	exit 1
fi

exit $retval

