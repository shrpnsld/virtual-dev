#!/bin/bash

export working_dir=$(pwd)
cd $(dirname $0)
export vdev_dir="$working_dir/.vdev"


source detail/constants
source detail/utils
source detail/dictionary


if [ ! -d "$vdev_dir" ]
then
	printf-vdev-error 'current path doesn'"'"'t have any virtual-dev configuration'
	exit 1
fi


HELP_MESSAGE=\
'Usage:
    vdev-msbuild [<MSBuild-arguments>...]                (1)
    vdev-msbuild <MVS-version> [<MSBuild-arguments>...]  (2)

Options:
    <MVS-version>              Specify Visual Studio version explicitly.
    <MSBuild-arguments>        Arguments for MSBuild.

Notes:
    Solution or project paths should be relative to project root.

    Form (1) should have .sln or .vcxproj in it'"'"'s arguments.
    Form (2) does not pass <MVS-version> to MSBuild.
'


#
# Parameters

vs_version=$1


#
# Funtions

vs-version-for-parameters()
{
	local parameters=("$@")

	local first_parameter=${parameters[@]}
	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "$first_parameter"
		return
	fi

	local project_path
	project_path=$(array-search-by-pattern '.*\.vcxproj' "${parameters[@]}")
	if [ $? == 0 ]
	then
		local absolute_solution_path=$(detail/detect-solution-for-project "$project_path")
	fi

	if [ -z "$absolute_solution_path" ]
	then
		local solution_path
		solution_path=$(array-search-by-pattern '.*\.sln' "${parameters[@]}")
		if [ $? != 0 ]
		then
			return 1
		fi

		local absolute_solution_path="$working_dir/$solution_path"
	fi

	if [ ! -r "$absolute_solution_path" ]
	then
		return 1
	fi

	detail/vs-version "$absolute_solution_path"
	if [ $? != 0 ]
	then
		return 1
	fi
}


msbuild-arguments-from-parameters()
{
	local first_parameter=$1

	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "${@:2}"
	else
		printf '%s\n' "$@"
	fi
}


#
# Main

vdev_vm_file="$vdev_dir/$VM_FILE"
dictionary-load "$vdev_vm_file" 'vm' 'guest_name'


# Paratemers

if [ $# \< 1 ]
then
	printf-vdev-error 'too few arguments'
	printf-message '%s' "$HELP_MESSAGE"
	exit 1
fi


# Checks

if ! detail/"$vm"/vm-exists "$guest_name"
then
	printf-vdev-error '"%s" does not exist' "$guest_name"
	exit 1
fi

detail/"$vm"/check-vm-started
if [ $? != 0 ]
then
	printf-vdev-error 'failed to start "%s"' "$guest_name"
	exit 1
fi


# Paths file

vdev_guest_paths_file="$vdev_dir/$GUEST_PATHS_FILE"

detail/check-paths-file "$vdev_guest_paths_file"
if [ $? == 2 ]
then
	printf-vdev-warning 'shared disk on "%s" for this project was changed. This may cause error during compilation. You may need to check paths in the solution.' "$guest_name"
fi

dictionary-load "$vdev_guest_paths_file" 'guest_root_dir' 'guest_msbuild_bat'


# msbuild

vs_version=$(vs-version-for-parameters "$@")
if [ $? != 0 ]
then
	printf-vdev-error 'failed to detect Visual Studio version. Specify it explicitly.'
	exit 1
fi

msbuild_arguments=($(msbuild-arguments-from-parameters "$@"))

# passing arguments through environment variable, because "cmd.exe" will remove "=" character from arguments like "/property:configuration=Release"
export virtual_dev_arguments="${msbuild_arguments[@]}"
detail/"$vm"/execute "$guest_msbuild_bat" "$guest_root_dir" "$vs_version" | detail/error-format-mvs-to-gcc
retval=${PIPESTATUS[0]}
if [ $retval == 1 ]
then
	printf-vdev-error 'failed to execute build command.'
	exit 1
fi

exit $retval

