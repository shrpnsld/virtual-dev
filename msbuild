#!/bin/bash

export working_dir=$(pwd)
cd $(dirname $0)
export vdev_dir="$working_dir/.vdev"


source detail/constants
source detail/utils
source detail/dictionary


if [ ! -d "$vdev_dir" ]
then
	printf_vdev_error 'current path doesn'"'"'t have any virtual-dev configuration'
	exit 1
fi


HELP_MESSAGE=\
'Usage:
	Path/To/virtual-dev/msbuild (<vs-version> | <solution-path>) [<msbuild-options>...]

Options:
	<vs-version>     Set Visual Studio version.
	<solution-path>  Detect Visual Studio version from solution file.
'


#
# Parameters

vs_version=$1


#
# Funtions

detect_solution_version()
{
	local solution_path=$1

	local solution_absolute_path="$working_dir/$solution_path"
	local solution_cache_dir=$(make_solution_cache_path "$solution_path" "$vdev_dir/cache")
	local solution_cache_path="$solution_cache_dir/solution.cache"
	detail/cache_solution_info "$solution_absolute_path" "$solution_cache_path"
	if [ $? != 0 ]
	then
		return 1
	fi

	dictionary_find "$solution_cache_path" 'version'
}


vs_version_from_parameters()
{
	local parameters=("$@")

	local first_parameter="${parameters[0]}"
	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "$first_parameter"
		return
	else
		local solution_path="$first_parameter"
		if [ ! -r "$working_dir/$solution_path" ]
		then
			printf_vdev_error 'solution file "%s" does not exists or not readable' "$solution_path"
			exit 1
		fi

		detect_solution_version "$solution_path"
		if [ $? != 0 ]
		then
			return 1
		fi

		return
	fi
}


check_paths_file()
{
	local paths_file=$1

	local found_disk=$(detail/find_disk "$working_dir")
	local guest_root_dir=$(dictionary_find "$paths_file" 'guest_root_dir')
	if [ $? == 0 ] && [ "$found_disk" == "$guest_root_dir" ]
	then
		return
	fi

	local guest_vdev_guest_dir="$found_disk/.vdev/guest"

	dictionary_insert "$paths_file" 'guest_root_dir' "$found_disk"
	dictionary_insert "$paths_file" 'guest_msbuild_bat' "$guest_vdev_guest_dir/msbuild.bat"
	dictionary_insert "$paths_file" 'guest_run_bat' "$guest_vdev_guest_dir/run.bat"
}


#
# Paratemers

if [ $# \< 1 ]
then
	printf_vdev_error 'too few arguments'
	printf_message '%s' "$HELP_MESSAGE"
	exit 1
fi


#
# Main

vdev_vm_file="$vdev_dir/$VM_FILE"
dictionary_load "$vdev_vm_file" 'vm' 'guest_name'


# Checks

if ! detail/"$vm"/vm_exists "$guest_name"
then
	printf_vdev_error '"%s" does not exist' "$guest_name"
	exit 1
fi

if ! detail/"$vm"/is_running "$guest_name"
then
	printf_vdev_error '"%s" is not running' "$guest_name"
	exit 1
fi


# Paths file and guest dir

vdev_guest_paths_file="$vdev_dir/$GUEST_PATHS_FILE"

check_paths_file "$vdev_guest_paths_file"
dictionary_load "$vdev_guest_paths_file" 'guest_root_dir' 'guest_msbuild_bat'

cp -Rn detail/guest "$vdev_dir/"


# msbuild

vs_version=$(vs_version_from_parameters "$@")
if [ $? != 0 ]
then
	exit 1
fi

msbuild_arguments=("${@:2}")

# passing arguments through environment variable, because "cmd.exe" will remove "=" character from arguments like "/property:configuration=Release"
export virtual_dev_arguments="${msbuild_arguments[@]}"
detail/"$vm"/execute "$guest_msbuild_bat" "$guest_root_dir" "$vs_version" | detail/error_format_mvs_to_gcc
retval=${PIPESTATUS[0]}
if [ $retval == 1 ]
then
	printf_vdev_error 'failed to execute build command'
	exit 1
fi

exit $retval

