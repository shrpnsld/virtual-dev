#!/bin/bash

export working_dir=$(pwd)
cd $(dirname $0)
export vdev_dir="$working_dir/.vdev"


source detail/utils


assert_dir_exists "$vdev_dir" 'current path doesn'"'"'t have any virtual-dev configuration'


source "$vdev_dir/vm"
source "$vdev_dir/conf"
source detail/dictionary


#
# Parameters

solution_path=$1
target=$2
configuration=$3


#
# Main

solution_absolute_path="$working_dir/$solution_path"
assert_file_readable "$solution_absolute_path"

solution_dir=$(dirname "$solution_path")

solution_cache_dir=$(make_solution_cache_path "$solution_path" "$vdev_dir/cache")
solution_cache_path="$solution_cache_dir/solution.cache"
detail/cache_solution_info "$solution_absolute_path" "$solution_cache_path"

vs_version=$(dictionary_find "$solution_cache_path" 'version')

project_relative_path=$(dictionary_find "$solution_cache_path" "$target")
project_path="$working_dir/$solution_dir/$project_relative_path"
project_dir=$(dirname "$project_relative_path")

properties_path="$solution_cache_dir/$target.$configuration.properties"
detail/cache_project_properties "$vs_version" "$solution_dir" "$project_path" "$configuration" "$properties_path"
source "$properties_path"

binary_name="$name$extension"
detail/"$vm"/execute "$guest_run_bat" "$guest_root_dir/$solution_dir/$project_dir" "$out_dir" "$binary_name"
retval=$?
printf "\n" # if put newline in Windows then it can be swallowed

exit $retval

