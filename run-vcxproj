#!/bin/bash

if [ -z "$VIRTUAL_DEV" ]
then
	export VIRTUAL_DEV=$(dirname $0)
fi

export VIRTUAL_DEV_WORKING_DIR=$PWD

source "$VIRTUAL_DEV"/detail/constants
source "$VIRTUAL_DEV"/detail/utils
source "$VIRTUAL_DEV"/detail/dictionary


export VIRTUAL_DEV_WORKSPACE_DIR="$VIRTUAL_DEV_WORKING_DIR/$VIRTUAL_DEV_WORKSPACE_NAME"

if [ ! -d "$VIRTUAL_DEV_WORKSPACE_DIR" ]
then
	printf-vdev-error 'current path doesn'"'"'t have any virtual-dev workspace'
	exit 1
fi


HELP_MESSAGE=\
'Usage:
    vdev-run-vcxproj <Path/To/Project.vcxproj> [<MSBuild-arguments>...]                         (1)
    vdev-run-vcxproj <Path/To/Solution.sln> <Path/To/Project.vcxproj> [<MSBuild-arguments>...]  (2)
    vdev-run-vcxproj <MVS-version> <Path/To/Project.vcxproj> [<MSBuild-arguments>...]           (3)

Parameters:
    <Path/To/Project.vcxproj>  Path to .vcxproj file; Visual Studio version will be detected by searching corresponding solution file.
    <Path/To/Solution.sln>     Specify solution file to detect Visual Studio version from it.
    <MVS-version>              Specify Visual Studio version explicitly.
    <MSBuild-arguments>        Arguments for MSBuild.

Notes:
    Form (1) passes it'"'"'s first argument to MSBuild.

    "Paths/To/Some.thing" should be relative to project root.
'


#
# Functions

validate-parameters()
{
	local first_parameter=$1
	local second_parameter=$2

	if [[ $first_parameter =~ .*\.vcxproj ]]
	then
		return
	fi

	if [[ $first_parameter =~ .*\.sln ]] && [[ $second_parameter =~ .*\.vcxproj ]]
	then
		return
	fi

	if [[ $first_parameter =~ ^[0-9]+$ ]] && [[ $second_parameter =~ .*\.vcxproj ]]
	then
		return
	fi

	return 1
}


vs-version-for-parameters()
{
	local first_parameter=$1

	if [[ $first_parameter =~ ^[0-9]+$ ]]
	then
		printf '%s\n' "$first_parameter"
		return
	fi

	if ! [[ $first_parameter =~ .*\.sln ]]
	then
		local solution_path=$("$VIRTUAL_DEV"/detail/find-solution-for-vcxproj "$first_parameter")
	fi

	if [ -z "$solution_path" ]
	then
		local solution_path="$VIRTUAL_DEV_WORKING_DIR/$first_parameter"
	fi

	if [ ! -r "$solution_path" ]
	then
		return 1
	fi

	"$VIRTUAL_DEV"/detail/vs-version "$solution_path"
	if [ $? != 0 ]
	then
		return 1
	fi
}


project-path-from-parameters()
{
	local parameters=("$@")

	local first_parameter="${parameters[0]}"
	if [[ $first_parameter =~ ^[0-9]+$ ]] || [[ $first_parameter =~ .*\.sln ]]
	then
		printf '%s\n' "${parameters[1]}"
	else
		printf '%s\n' "${parameters[0]}"
	fi
}


msbuild-arguments-from-parameters()
{
	local first_parameter=$1

	if [[ $first_parameter =~ ^[0-9]+$ ]] || [[ $first_parameter =~ .*\.sln ]]
	then
		printf '%s\n' "${@:3}"
	else
		printf '%s\n' "${@:2}"
	fi
}


next-properties-file-name()
{
	local properties_dir=$1

	local file_name=$(ls -1 "$properties_dir" | tail -n 1)
	if [ -z "$file_name" ]
	then
		printf '%s\n' '1'
		return
	fi

	((++file_name))
	printf '%s\n' "$file_name"
}


find-vcxproj-properties-file()
{
	local properties_dir=$1
	local header=$2

	local properties_files=($(grep --line-regexp --fixed-strings --recursive --files-with-matches --no-messages "#$header" "$properties_dir"))
	if [ "${#properties_files[@]}" == 0 ]
	then
		file_name=$(next-properties-file-name "$properties_dir")
		printf '%s\n' "$properties_dir/$file_name"
		return
	fi

	printf '%s\n' "${properties_files[0]}"
}


cache-vcxproj-properties()
{
	local vs_version=$1
	local project_path=$2
	local msbuild_arguments=("${@:3}")

	local OutDir
	OutDir=$("$VIRTUAL_DEV"/detail/project-property "$vs_version" "$project_path" 'OutDir' "${msbuild_arguments[@]}")
	if [ $? != 0 ]
	then
		return 1
	fi

	OutDir=$(escape-backslashes "$OutDir")

	local TargetName
	TargetName=$("$VIRTUAL_DEV"/detail/project-property "$vs_version" "$project_path" 'TargetName' "${msbuild_arguments[@]}")
	if [ $? != 0 ]
	then
		return 1
	fi

	local TargetExt
	TargetExt=$("$VIRTUAL_DEV"/detail/project-property "$vs_version" "$project_path" 'TargetExt' "${msbuild_arguments[@]}")
	if [ $? != 0 ]
	then
		return 1
	fi

	dictionary-with-header "$properties_file_path" "$header"
	dictionary-save "$properties_file_path" 'OutDir' 'TargetName' 'TargetExt'

	printf '%s\n' "$properties_file_path"
}


check-vcxproj-properties()
{
	local vs_version=$1
	local project_path=$2
	local properties_dir=$3
	local msbuild_arguments=("${@:4}")

	local header="$project_path ${msbuild_arguments[@]}"
	local properties_file_path=$(find-vcxproj-properties-file "$properties_dir" "$header")
	if [ ! "$VIRTUAL_DEV_WORKING_DIR/$project_path" -nt "$properties_file_path" ]
	then
		printf '%s\n' "$properties_file_path"
		return
	fi

	cache-vcxproj-properties "$vs_version" "$project_path" "${msbuild_arguments[@]}"
}


#
# Main

vdev_vm_file="$VIRTUAL_DEV_WORKSPACE_DIR/$VM_FILE"
dictionary-load "$vdev_vm_file" 'vm' 'guest_name'


# Parameters

if [ $# \< 1 ]
then
	printf-vdev-error 'too few arguments'
	printf '%s\n' "$HELP_MESSAGE"
	exit 1
fi

if ! validate-parameters "$@"
then
	printf-vdev-error 'bad arguments'
	printf '%s\n' "$HELP_MESSAGE"
	exit 1
fi


# Checks

if ! "$VIRTUAL_DEV"/detail/"$vm"/vm-exists "$guest_name"
then
	printf-vdev-error '"%s" does not exist' "$guest_name"
	exit 1
fi

"$VIRTUAL_DEV"/detail/"$vm"/check-vm-started
if [ $? != 0 ]
then
	printf-vdev-error 'failed to start "%s"' "$guest_name"
	exit 1
fi


# Paths file

vdev_guest_paths_file="$VIRTUAL_DEV_WORKSPACE_DIR/$GUEST_PATHS_FILE"

"$VIRTUAL_DEV"/detail/check-paths-file "$vdev_guest_paths_file"
if [ $? == 2 ]
then
	printf-vdev-warning 'shared disk on "%s" for this workspace was changed. This may cause an error on running project. You may need to check paths in the solution.' "$guest_name"
fi


dictionary-load "$vdev_guest_paths_file" 'guest_root_dir' 'guest_msbuild_bat' 'guest_run_bat'


# MVS version

vs_version=$(vs-version-for-parameters "$@")
if [ $? != 0 ]
then
	printf-vdev-error 'failed to detect Visual Studio version. Specify it explicitly'
	exit 1
fi


# Project properties

project_path=$(project-path-from-parameters "$@")
msbuild_arguments=($(msbuild-arguments-from-parameters "$@"))

properties_dir="$VIRTUAL_DEV_WORKSPACE_DIR/$VCXPROJ_PROPS_FILE"
mkdir -p "$properties_dir"
if [ $? != 0 ]
then
	printf_vdev_error 'failed to create cache folder "%s"' "$properties_dir"
	exit 1
fi

properties_file_path=$(check-vcxproj-properties "$vs_version" "$project_path" "$properties_dir" "${msbuild_arguments[@]}")
if [ $? != 0 ]
then
	printf-vdev-error 'failed to get project properties'
	exit 1
fi

dictionary-load "$properties_file_path" 'OutDir' 'TargetName' 'TargetExt'


# Runnig

project_dir=$(dirname $project_path)
guest_project_dir="$guest_root_dir\\$project_dir"
binary_name="$TargetName$TargetExt"

trap "$VIRTUAL_DEV/detail/terminate $binary_name" INT

"$VIRTUAL_DEV"/detail/"$vm"/execute "$guest_run_bat" "$guest_project_dir" "$OutDir" "$binary_name"
retval=$?
printf '\n' # if put newline in Windows then it can be swallowed ???

if [ $retval == 1 ]
then
	printf-vdev-error 'failed to execute run command'
	exit 1
fi

exit $retval

